/*
	Build.gradle script to construct the Anynines Website

	from a terminal command line, 'cd' into this folder then:
	gradlew

	this runs the defaultTasks below using the gradle wrapper tool gradlew <or> bash ./gradlew
*/
buildscript {
    allprojects {
        repositories {
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }
    dependencies {
        //classpath 'org.jruby:jruby-complete:9.2.19.0'
        //classpath 'org.asciidoctor:asciidoctorj:2.5.1'
        //classpath "org.asciidoctor:asciidoctorj-pdf:1.6.0"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
    }
}
plugins {
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

apply plugin: 'groovy'
apply plugin: 'war'
//apply plugin: 'org.asciidoctor.gradle.asciidoctor'
//apply plugin: 'org.asciidoctor.convert'

defaultTasks 'clean','asciidoctor', 'build', 'war'

// logic to suport asciidoctor html, pdf and diagrams output
/*
buildscript {
    repositories {
        jcenter{}
        maven{ url "https://repository.jboss.org/maven2/"}
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath("org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1") // for PDF's
    }
}
*/

repositories {
	mavenCentral()
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:3.0.8"
    implementation "org.jruby:jruby-complete:1.7.26"
    implementation "com.beust:jcommander:1.48"
    implementation "org.asciidoctor:asciidoctorj:1.5.3.2"

    implementation "org.codehaus.groovy:groovy-all:3.0.8"
    implementation "redis.clients:jedis:2.7.2"	// potential page caching service if Redis service available on PaaS target
}

war {
  //archiveName 'Website.war'
  from 'src/main/resources' // adds a file-set to the root of the archive
}
    
/*
    task copyReadme(type: Copy, dependsOn: ["asciidoctor"]) {
        from "$project.projectDir"
        into "$project.projectDir"
    }
*/

// closure for asciidoctor plugin; chg these values to influence asciidoctor task
asciidoctor {
    println "... project.projectDir : "+project.projectDir   
    println "... project.buildDir   : "+project.buildDir   

    sourceDir = file('$project.projectDir')    //'src/docs/asciidoc') // plugin reads all *.adoc files in this folder and any sub-folders
    outputDir = file("${project.buildDir}/docs")     //main/tester')   // file("$buildDir/docs")
    //separateOutputDirs=false	// true creates two folders within the outDir path one for /html, one for /pdf
    //backends = ['html5' ]	// to create both html and pdf output:  backends = ['html5' ,'pdf']
    println "... outputDir          : "+outputDir   
    
    options = [
        doctype: 'book'
/*
        attributes: [
            'source-highlighter': 'coderay',
     		'toc-title'           : 'Table of Contents',
            'toc'                 : 'right'
        ]
*/
    ]
}
